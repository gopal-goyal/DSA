class Solution {
public:
    bool hasCycle(ListNode *head) {
        
     // if head is NULL then return false;
        if(!head) return false;
        
	// making two pointers fast and slow and assignning them to head
        ListNode *slow = head;
        ListNode *fast = head;
        
	// till fast and fast-> next not reaches NULL
       while(fast != NULL && fast->next != NULL){
           
       // we will increment fast by 2 step and slow by 1 step
           fast = fast->next->next;
           slow = slow->next;
           
       // At the point if fast and slow are at same address
       // this means linked list has a cycle in it.
           if(slow == fast) return true;
       }
            
	// if traversal reaches to NULL this means no cycle.
        return false;
    }    
};
