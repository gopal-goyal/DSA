void inorder(TreeNode<int> *root,vector<int> &v){
	if(root == NULL) return;
	
	inorder(root->left,v);
	v.push_back(root->data);
	inorder(root->right,v);
}
vector<int> merge(vector<int> v1, vector<int> v2){
	vector<int> ans(v1.size() + v2.size());
	int i =0;
	int j = 0;
	int k =0;
	
	while(i < v1.size() && j < v2.size()){
		if(v1[i] > v2[j]){
			ans[k++] = v2[j++];
		}else{
			ans[k++] = v1[i++];
		}
	}
	while(i < v1.size()){
		ans[k++] = v1[i++];
	}
	while(j < v2.size()){
		ans[k++] = v2[j++];
	}
	return ans;
}
TreeNode<int> *inordertoBST(vector<int> v, int s , int e){
	if(s>e) return NULL;
	
	int mid = (s+e)/2;
	TreeNode<int>* root = new TreeNode<int>(v[mid]);
	root->left = inordertoBST(v,s,mid-1);
	root->right = inordertoBST(v,mid+1,e);
	return root;
}

TreeNode<int> *mergeBST(TreeNode<int> *root1, TreeNode<int> *root2){
    // Write your code here.
	vector<int> v1,v2;
	inorder(root1,v1);
	inorder(root2,v2);
	
	vector<int> merged = merge(v1,v2);
	
	return inordertoBST(merged,0,merged.size()-1);
	
	
}
